// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adanyl0v/go-sql-adapter/postgresql/pgx/trace (interfaces: Logger)
//
// Generated by this command:
//
//	mockgen -typed -destination mock/trace.go . Logger
//

// Package mock_trace is a generated GoMock package.
package mock_trace

import (
	reflect "reflect"

	trace "github.com/adanyl0v/go-sql-adapter/postgresql/pgx/trace"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockLogger) Log(level trace.Level, message string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", level, message, fields)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(level, message, fields any) *MockLoggerLogCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), level, message, fields)
	return &MockLoggerLogCall{Call: call}
}

// MockLoggerLogCall wrap *gomock.Call
type MockLoggerLogCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerLogCall) Return() *MockLoggerLogCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerLogCall) Do(f func(trace.Level, string, map[string]any)) *MockLoggerLogCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerLogCall) DoAndReturn(f func(trace.Level, string, map[string]any)) *MockLoggerLogCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// With mocks base method.
func (m *MockLogger) With(fields map[string]any) trace.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", fields)
	ret0, _ := ret[0].(trace.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With(fields any) *MockLoggerWithCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With), fields)
	return &MockLoggerWithCall{Call: call}
}

// MockLoggerWithCall wrap *gomock.Call
type MockLoggerWithCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithCall) Return(arg0 trace.Logger) *MockLoggerWithCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithCall) Do(f func(map[string]any) trace.Logger) *MockLoggerWithCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithCall) DoAndReturn(f func(map[string]any) trace.Logger) *MockLoggerWithCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithCallerSkip mocks base method.
func (m *MockLogger) WithCallerSkip(skip int) trace.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCallerSkip", skip)
	ret0, _ := ret[0].(trace.Logger)
	return ret0
}

// WithCallerSkip indicates an expected call of WithCallerSkip.
func (mr *MockLoggerMockRecorder) WithCallerSkip(skip any) *MockLoggerWithCallerSkipCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCallerSkip", reflect.TypeOf((*MockLogger)(nil).WithCallerSkip), skip)
	return &MockLoggerWithCallerSkipCall{Call: call}
}

// MockLoggerWithCallerSkipCall wrap *gomock.Call
type MockLoggerWithCallerSkipCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithCallerSkipCall) Return(arg0 trace.Logger) *MockLoggerWithCallerSkipCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithCallerSkipCall) Do(f func(int) trace.Logger) *MockLoggerWithCallerSkipCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithCallerSkipCall) DoAndReturn(f func(int) trace.Logger) *MockLoggerWithCallerSkipCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
